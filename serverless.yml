service: dynohttp
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  profile: dyonserver
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:*"
          Resource:
            - "*"

functions:
  apiInfo:
    handler: index.handler
    events:
      - httpApi:
          path: /
          method: get

  apiHello:
    handler: src/routes/getHello.handler
    events:
      - httpApi:
          path: /hello
          method: get
  UserAPi:
    handler: src/routes/getData.getUserByTask
    events:
      - httpApi:
          path: /getUserByTask/{task}
          method: get

  CompanyAPi:
    handler: src/routes/Company.getCompany
    events:
      - httpApi:
          path: /getCompany
          method: post

  EntityByPk:
    handler: src/routes/Company.getEntityByPk
    events:
      - httpApi:
          path: /getEntityByPk
          method: post

  UserByEmail:
    handler: src/routes/Company.getUserByEmail
    events:
      - httpApi:
          path: /getUserByEmail
          method: post

  UpdateEmail:
    handler: src/routes/Company.updateUserEmail
    events:
      - httpApi:
          path: /updateEmail
          method: post

  dynamoDBStreamHandler:
    handler: src/routes/event.handler
    events:
      - stream:
          type: dynamodb
          arn: "arn:aws:dynamodb:ap-south-1:019447061794:table/CompanyTable/stream/2024-04-04T15:21:34.081"

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 9090
